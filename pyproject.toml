[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "torchflux"
description = "An opinionated zero-config pytorch trainer"
readme = { file = "README.md", content-type = "text/markdown" }
license = { file = "LICENSE" }
authors = [{ name = "Rohit Krishnan", email = "rohit.k.kesavan@gmail.com" }]
# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
]
dynamic = ["version"]
requires-python = ">=3.8"
dependencies = ["anywidget"]
[project.optional-dependencies]
jupyterlab = ["jupyterlab", "ipykernel", "watchfiles"]
test = ["setuptools"]

[project.urls]
Homepage = "https://github.com/Cogniveon/torchflux"
Documentation = "https://github.com/Cogniveon/torchflux"
Repository = "https://github.com/Cogniveon/torchflux"
Issues = "https://github.com/Cogniveon/torchflux/issues"
Changelog = "https://github.com/Cogniveon/torchflux/blob/main/CHANGELOG.md"

# [project.scripts]
# torchflux = "torchflux:main_cli"

# [project.gui-scripts]
# torchflux = "torchflux:gui"

# [project.entry-points."torchflux.ui"]
# console = "torchflux.ui.console"
# notebook = "torchflux.ui.notebook"

[tool.hatch.version]
path = "torchflux/__init__.py"


[tool.hatch.build]
dev-mode-dirs = ["."]
only-packages = true
artifacts = ["torchflux/static/*"]
[tool.hatch.build.targets.wheel]
packages = ["torchflux"]
[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = ["torchflux/static/demoWidget.js"]
skip-if-exists = ["torchflux/static/demoWidget.js"]
dependencies = ["hatch-jupyter-builder>=0.5.0"]
[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
npm = "pnpm"
build_cmd = "build"

[tool.hatch.env]
requires = ["hatch-pip-compile"]

[tool.hatch.envs.default]
type = "pip-compile"
# automatically add the dev feature to the default env (e.g., hatch shell)
features = ["jupyterlab"]
[tool.hatch.envs.default.scripts]
all = [
    # "hatch build",
    "hatch run style:lint",
    "hatch run types:check",
    "hatch run test:without-coverage",
    "hatch run safety:report",
]

# TYPES
[tool.hatch.envs.types]
type = "pip-compile"
dependencies = ["mypy"]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive ./"

# TEST
[tool.hatch.envs.test]
type = "pip-compile"
dependencies = [
    "pytest",
    "watchfiles",
    "coverage[toml]",
    "genbadge[all]",
    "pytest-html",
    "pytest-cov",
]
[tool.hatch.envs.test.scripts]
without-coverage = ["python -m pytest -c pyproject.toml tests/"]
with-coverage = [
    "pytest -c pyproject.toml --cov=torchflux --cov-report html --junitxml=junit.xml tests/",
    "coverage report --show-missing",
    "coverage xml",
    "genbadge coverage -i coverage.xml -o docs/assets/coverage.svg",
    "genbadge tests -i junit.xml -o docs/assets/test_count.svg",
]
# [[tool.hatch.envs.test.matrix]]
# python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

# STYLE
[tool.hatch.envs.style]
type = "pip-compile"
detached = true
dependencies = [
    "isort[colors]",
    "pyupgrade",
    "pre-commit",
    "pydocstyle",
    "pylint",
    "black[jupyter]",
]
[tool.hatch.envs.style.scripts]
check = [
    "hatch run style:lint-isort --diff --check-only",
    "hatch run style:lint-black --diff --check",
]
lint = [
    "hatch run style:lint-pyupgrade && hatch run style:lint-isort && hatch run style:lint-black",
]
lint-isort = ["isort --settings-path pyproject.toml {args} ./"]
lint-black = ["black --config pyproject.toml {args} ./"]
lint-pyupgrade = ["pyupgrade --exit-zero-even-if-changed --py39-plus **/*.py"]
pre-commit-install = "pre-commit install"
pre-commit-run = "pre-commit run --all-files"

# SAFETY
[tool.hatch.envs.safety]
type = "pip-compile"
detached = true
dependencies = ["bandit", "safety"]
[tool.hatch.envs.safety.scripts]
bandit-report = ["bandit -ll --recursive torchflux tests"]
report = ["safety check --full-report", "hatch run safety:bandit-report"]

# DOCS
[tool.hatch.envs.docs]
type = "pip-compile"
dependencies = [
    "mkdocs",
    "mkdocs-material",
    "mkdocs-material-extensions",
    "markdown",
    "pygments",
    "pymdown-extensions",
    "mkdocs-minify-plugin",
    "mkdocs-coverage",
    "mkdocstrings-python",
]
[tool.hatch.envs.docs.scripts]
build = ["mkdocs build --clean --strict"]
serve = ["mkdocs serve --dev-addr localhost:8000"]


[tool.black]
# https://github.com/psf/black
target-version = ["py39"]
line-length = 120
color = true

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.isort]
# https://github.com/timothycrosley/isort/
py_version = 39
line_length = 120

known_typing = [
    "typing",
    "types",
    "typing_extensions",
    "mypy",
    "mypy_extensions",
]
sections = [
    "FUTURE",
    "TYPING",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER",
]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
color_output = true

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = "3.9"
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true


[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs = [
    "hooks",
    "*.egg",
    ".eggs",
    "dist",
    "build",
    "docs",
    ".tox",
    ".git",
    "__pycache__",
]
doctest_optionflags = [
    "NUMBER",
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
]
# filterwarnings = ["ignore::DeprecationWarning"]
# Extra options:
addopts = [
    "--strict-markers",
    "--tb=short",
    "--doctest-modules",
    "--doctest-continue-on-failure",
]
